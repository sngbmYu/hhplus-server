openapi: 3.1.0
info:
  title: 콘서트 예약 서비스 API 명세서
  version: 1.0.0

servers:
  - url: http://localhost:4010
    description: mock server

tags:
  - name: Queue
    description: 대기열 토큰 발급
  - name: Reservation
    description: 예약 가능 날짜/좌석 조회 및 좌석 예약
  - name: Balance
    description: 잔액 조회 및 충전
  - name: Payment
    description: 결제

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer 인증. "Authorize" 버튼을 눌러 아래 토큰을 입력하세요.
        
        예시 토큰:
        Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
        eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.
        TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    queueToken:
      type: apiKey
      in: header
      name: Queue-Token
      description: |
        Queue Token 인증. "Authorize" 버튼을 눌러 아래 토큰을 입력하세요.

        예시 토큰: 8f14e45f-ea9d-4b52-9c3b-8b7c2d8a8f9a

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      schema:
        type: string
        format: uuid
        example: "2b1f5a40-9a39-4f31-a7f8-6c3e39c7ab91"
      description: 재시도/중복 생성 방지용 멱등키, 클라이언트 측에서 임의의 `UUID` 생성
    Prefer:
      name: Prefer
      in: header
      required: false
      schema: { type: string, example: code=200 }
      description: "Prism mock에서 특정 상태코드를 강제합니다. (예: code=200)"

  responses:
    CommonErrors:
      description: 공통 에러 응답 (400|401|404|429|500)
      content:
        application/json:
          examples:
            Bad_Request:
              value: { code: COMMON_BAD_REQUEST, message: Bad Request }
            Unauthorized:
              value: { code: AUTH_UNAUTHORIZED, message: Unauthorized }
            Not_Found:
              value: { code: COMMON_NOT_FOUND, message: Not Found }
            Too_Many_Requests:
              value: { code: COMMON_RATE_LIMITED, message: Too Many Requests }
            Internal_Server_Error:
              value: { code: COMMON_INTERNAL_ERROR, message: Internal Server Error }

paths:
  /api/v1/queues/tokens:
    post:
      tags: [ Queue ]
      summary: 유저 대기열 토큰 발급
      description: |
        로그인 사용자에게 각 콘서트에 대한 대기열 토큰을 발급합니다.
        한 사용자, 한 concertId 당 활성 토큰 1개만 허용합니다.
        이미 토큰이 있으면 같은 토큰을 반환합니다.
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: "#/components/parameters/Prefer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ concertId ]
              properties:
                concertId:
                  type: string
                  format: uuid
                  description: 외부 공개용 콘서트 식별자 (UUIDv4)
                  example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: 기존에 발급한 토큰 재전달
          headers:
            Queue-Token-Expires-At:
              description: Queue-Token 만료 시간
              schema: { type: string, format: date-time }
          content:
            application/json:
              schema:
                type: object
                required: [ token, position ]
                properties:
                  token:
                    type: string
                    format: uuid
                    description: 대기열 토큰(UUIDv4)
                    example: "8f14e45f-ea9d-4b52-9c3b-8b7c2d8a8f9a"
                  position:
                    type: integer
                    description: 요청한 시점의 대기열 순번
                    example: 11111
        '201':
          description: 새 대기열 토큰 정상 발급
          headers:
            Queue-Token-Expires-At:
              description: Queue-Token 만료 시간
              schema: { type: string, format: date-time }
          content:
            application/json:
              schema:
                type: object
                required: [ token, position ]
                properties:
                  token:
                    type: string
                    format: uuid
                    description: 대기열 토큰(UUIDv4)
                    example: "8f14e45f-ea9d-4b52-9c3b-8b7c2d8a8f9a"
                  position:
                    type: integer
                    description: 발급 시점에 부여된 대기열 순번
                    example: 12345
        '409':
          description: 기존 토큰 존재, 새 토큰 발급 불가
          content:
            application/json:
              schema:
                type: object
                required: [ code, message ]
                properties:
                  code: { type: string, example: QUEUE_CONFLICT }
                  message: { type: string, example: "이미 활성화된 토큰이 존재합니다." }

        '422':
          description: 대기열 토큰 만료
          content:
            application/json:
              schema:
                type: object
                required: [ code, message ]
                properties:
                  code: { type: string, example: QUEUE_UNPROCESSABLE }
                  message: { type: string, example: "토큰이 만료되어 처리할 수 없습니다." }
        default:
          $ref: "#/components/responses/CommonErrors"

  /api/v1/reservations/dates:
    get:
      tags: [ Reservation ]
      summary: 예약 가능한 날짜 목록 조회
      description: |
        특정 콘서트에 대해 예약 가능한 날짜(회차)의 리스트를 반환합니다.
        날짜는 시간을 포함하며, 회차별로 등급 단위 좌석 수를 제공합니다.
      parameters:
        - name: concertId
          in: query
          required: true
          schema: { type: string, format: uuid }
          description: 콘서트 식별자 (UUIDv4)
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: 예약 가능한 날짜(회차) 정보
          content:
            application/json:
              schema:
                type: object
                required: [ schedules ]
                properties:
                  schedules:
                    type: array
                    description: 날짜별 예약 정보
                    items:
                      type: object
                      required: [ startAt, isSoldOut, perGradeCounts ]
                      properties:
                        startAt:
                          type: string
                          format: date-time
                          description: 공연 시작 시간
                          example: "2025-10-01T19:00:00"
                        isSoldOut:
                          type: boolean
                          description: 해당 회차의 좌석 매진 여부
                          example: false
                        perGradeCounts:
                          type: array
                          description: 등급별 좌석 정보
                          items:
                            type: object
                            required: [ grade, availableCount, totalCount ]
                            properties:
                              grade:
                                type: string
                                description: |
                                  좌석 등급 (예: VIP, R, S)
                                example: "R"
                              availableCount:
                                type: integer
                                description: 해당 등급의 남은 좌석 수
                                example: 357
                              totalCount:
                                type: integer
                                description: 해당 등급의 전체 좌석 수
                                example: 1000
              examples:
                OK:
                  value:
                    schedules:
                      - startAt: "2025-10-01T19:00:00"
                        isSoldOut: false
                        perGradeCounts:
                          - grade: "VIP"
                            availableCount: 59
                            totalCount: 100
                          - grade: "R"
                            availableCount: 128
                            totalCount: 400
                          - grade: "S"
                            availableCount: 357
                            totalCount: 1000
        default:
          $ref: "#/components/responses/CommonErrors"

  /api/v1/reservations/seats:
    get:
      tags: [ Reservation ]
      summary: 예매 가능 좌석 조회
      description: |
        특정 콘서트 회차의 좌석 현황을 반환합니다.
        대기열을 통과한 사용자만 접근 가능하며, 요청 시 `Queue-Token` 헤더를 반드시 포함해야 합니다.
      security:
        - bearerAuth: [ ]
          queueToken: [ ]
      parameters:
        - name: concertId
          in: query
          required: true
          schema: { type: string, format: uuid }
          description: 콘서트 식별자 (UUIDv4)
          example: "550e8400-e29b-41d4-a716-446655440000"
        - name: startAt
          in: query
          required: true
          schema: { type: string, format: date-time }
          description: 조회할 회차 시작 시간 (예약 가능한 회차 중 하나)
          example: "2025-10-01T19:00:00"
        - name: availableOnly
          in: query
          required: false
          schema: { type: boolean, default: false }
          description: |
            `true`로 설정 시, 좌석 현황 재요청 시 예약 가능한 좌석만 받을 수 있습니다.
            기본값은 false이며, 이 경우 모든 좌석과 상태(AVAILABLE/UNAVAILABLE)를 포함합니다.
        - $ref: "#/components/parameters/Prefer"
      responses:
        '200':
          description: 좌석 현황 조회 성공
          content:
            application/json:
              schema:
                type: object
                required: [ seats ]
                properties:
                  seats:
                    type: array
                    items:
                      type: object
                      required: [ seatNo, grade, status ]
                      properties:
                        seatNo:
                          type: integer
                          description: 좌석 번호
                          example: 1
                        grade:
                          type: string
                          description: 좌석 등급
                          example: "R"
                        status:
                          type: string
                          enum: [ AVAILABLE, UNAVAILABLE ]
                          description: 좌석 예약 가능 여부
                          example: "AVAILABLE"
              example:
                seats:
                  - seatNo: 1
                    grade: "VIP"
                    status: "UNAVAILABLE"
                  - seatNo: 2
                    grade: "R"
                    status: "AVAILABLE"
                  - seatNo: 3
                    grade: "S"
                    status: "AVAILABLE"
        default:
          $ref: "#/components/responses/CommonErrors"

  /api/v1/reservations:
    post:
      tags: [ Reservation ]
      summary: 좌석 예매 요청
      description: |
        특정 콘서트 회차의 좌석 예약을 요청합니다.
        대기열을 통과한 사용자만 접근 가능하며, 요청 시 `Queue-Token`와 `Idempotency-Key` 헤더를 반드시 포함해야 합니다.
      security:
        - bearerAuth: [ ]
          queueToken: [ ]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/Prefer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ concertId, startAt, seats ]
              properties:
                concertId:
                  type: string
                  format: uuid
                  description: 콘서트 식별자 (UUIDv4)
                  example: "550e8400-e29b-41d4-a716-446655440000"
                startAt:
                  type: string
                  format: date-time
                  description: 공연 시작 시간
                  example: "2025-10-01T19:00:00"
                seats:
                  type: array
                  description: 예약할 좌석 목록
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: object
                    required: [ seatNo, grade ]
                    properties:
                      seatNo:
                        type: integer
                        description: 좌석 번호
                        example: 1
                      grade:
                        type: string
                        description: 좌석 등급
                        example: "R"
      responses:
        '200':
          description: 기존 예약 정보 반환
          headers:
            Payment-Redirect-URL:
              description: 결제 페이지 리다이렉트 URL
              schema:
                type: string
                format: uri
                example: "https://client.example.com/payments?reservationId=1a2b3c4d-5678-90ab-cdef-112233445566"
          content:
            application/json:
              schema:
                type: object
                required: [ message, reservationId ]
                properties:
                  message: { type: string, example: "이미 생성된 예약입니다." }
                  reservationId:
                    type: string
                    format: uuid
                    description: 공개 예약 식별자
                    example: "1a2b3c4d-5678-90ab-cdef-112233445566"
        '201':
          description: 예약 생성됨
          headers:
            Payment-Redirect-URL:
              description: 결제 페이지 리다이렉트 URL
              schema:
                type: string
                format: uri
                example: "https://client.example.com/payments?reservationId=9f8e7d6c-1234-5678-90ab-abcdefabcdef"
          content:
            application/json:
              schema:
                type: object
                required: [ message, reservationId ]
                properties:
                  message: { type: string, example: "예약이 성공적으로 생성되었습니다." }
                  reservationId:
                    type: string
                    format: uuid
                    description: 예약 식별자
                    example: "9f8e7d6c-1234-5678-90ab-abcdefabcdef"
        '403':
          description: 대기열 토큰 검증 실패
          content:
            application/json:
              schema:
                type: object
                required: [ code, message ]
                properties:
                  code: { type: string, example: QUEUE_TOKEN_INVALID }
                  message: { type: string, example: "대기열 토큰이 만료되었습니다." }

        '409':
          description: 좌석 경합 충돌 또는 멱등키 페이로드 불일치
          content:
            application/json:
              schema:
                type: object
                required: [ code, message ]
                properties:
                  code: { type: string, example: SEAT_CONFLICT }
                  message: { type: string, example: "이미 선택된 좌석입니다." }
                  conflictingSeatNos:
                    type: array
                    items: { type: integer }
                    example: [ 1, 2 ]

        '422':
          description: 유효성 오류 (존재하지 않는 좌석/콘서트/회차 등)
          content:
            application/json:
              schema:
                type: object
                required: [ code, message ]
                properties:
                  code: { type: string, example: INVALID_SEAT }
                  message: { type: string, example: "5번 좌석은 존재하지 않습니다." }
        default:
          $ref: "#/components/responses/CommonErrors"
  /api/v1/balances/{userId}:
    get:
      tags: [ Balance ]
      summary: 잔액 조회
      description: 특정 사용자의 현재 잔액을 조회합니다.
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: 사용자 식별자 (UUIDv4)
          example: "8c4f5f02-63f6-4c8b-b3d1-9fbc7a1c1234"
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 성공적으로 조회됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: integer
                    description: 현재 잔액
                    example: 50000
        default:
          $ref: "#/components/responses/CommonErrors"
    post:
      tags: [ Balance ]
      summary: 잔액 충전
      description: 특정 사용자의 잔액을 충전합니다.
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: 사용자 식별자 (UUIDv4)
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ amount ]
              properties:
                amount:
                  type: integer
                  description: 충전할 금액
                  example: 10000
      responses:
        '200':
          description: 충전 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: integer
                    description: 충전 후 잔액
                    example: 60000
        default:
          $ref: "#/components/responses/CommonErrors"

  /api/v1/payments:
    post:
      tags: [ Payment ]
      summary: 결제 생성 및 처리
      description: |
        예약된 좌석에 대한 결제를 처리합니다.
        결제가 성공하면 해당 예약 건을 확정 처리하고, Queue-Token을 만료합니다.
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - bearerAuth: [ ]
          queueToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ userId, reservationId ]
              properties:
                userId:
                  type: string
                  format: uuid
                  description: 결제 사용자 ID
                reservationId:
                  type: string
                  format: uuid
                  description: 결제 대상 예약 ID
      responses:
        '201':
          description: 결제 성공 및 결제 내역 생성 완료
          content:
            application/json:
              schema:
                type: object
                required: [ paymentId, status, amount, reservationId, createdAt ]
                properties:
                  paymentId:
                    type: string
                    format: uuid
                    description: 결제 식별자
                    example: "9f8e7d6c-1234-5678-90ab-abcdefabcdef"
                  status:
                    type: string
                    description: 결제 상태
                    example: "SUCCEEDED"
                  amount:
                    type: integer
                    description: 최종 결제 금액
                    example: 150000
                  reservationId:
                    type: string
                    format: uuid
                    description: 결제된 예약 식별자
                    example: "1a2b3c4d-5678-90ab-cdef-112233445566"
                  createdAt:
                    type: string
                    format: date-time
                    description: 결제 생성 시각
                    example: "2025-10-01T19:05:00"
        '402':
          description: 결제 실패 (승인 거절/잔액 부족 등)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "FAILED" }
                  reason: { type: string, example: "INSUFFICIENT_FUNDS" }
                  message: { type: string, example: "포인트 잔액이 부족합니다." }
        '409':
          description: 예약 상태 충돌
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: string, example: 'RESERVATION_CONFLICT' }
                  message: { type: string, example: '해당 예약은 이미 결제 완료된 상태입니다.' }
        default:
          $ref: '#/components/responses/CommonErrors'

  /api/v1/payments/{paymentId}:
    get:
      tags: [ Payment ]
      summary: 결제 단건 조회
      description: 결제 상태와 매핑된 예약 목록, 금액 정보를 조회합니다.
      parameters:
        - name: paymentId
          in: path
          required: true
          schema: { type: string, format: uuid }
          description: 결제 식별자 (UUIDv4)
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                required: [ paymentId, status, amount, reservationId, createdAt ]
                properties:
                  paymentId:
                    type: string
                    format: uuid
                    description: 결제 식별자
                    example: "9f8e7d6c-1234-5678-90ab-abcdefabcdef"
                  status:
                    type: string
                    description: 결제 상태
                    example: "SUCCEEDED"
                  amount:
                    type: integer
                    description: 최종 결제 금액
                    example: 150000
                  reservationId:
                    type: string
                    format: uuid
                    description: 결제된 예약 식별자
                    example: "1a2b3c4d-5678-90ab-cdef-112233445566"
                  createdAt:
                    type: string
                    format: date-time
                    description: 결제 생성 시각
                    example: "2025-10-01T19:05:00"
        default:
          $ref: '#/components/responses/CommonErrors'

